"""
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–∞ aiogram 3 —Å FSM –∏ SQLite.
–ó–∞–ø—É—Å–∫: python bot.py
"""

import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.client.default import DefaultBotProperties

from config import load_settings
from db import (
    init_db,
    get_next_ticket_number,
    add_ticket,
    get_active_tickets_by_user,
    get_active_ticket_by_number,
    get_ticket_by_number_any_status,
    set_ticket_status,
    get_random_active_ticket,
    archive_lottery,
)
from keyboards import admin_menu, user_menu, back_menu, lottery_inline_actions
from utils import draw_lock, is_admin, parse_int_safe


class AskTicketNumber(StatesGroup):
    user_view = State()
    admin_view = State()
    admin_delete = State()


class AskReason(StatesGroup):
    reject_reason = State()
    delete_reason = State()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è settings
_settings = None


def get_settings():
    return _settings


async def start_menu(message: Message) -> None:
    settings = get_settings()
    if is_admin(message.from_user.id, settings.admin_ids):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–¥–º–∏–Ω)", reply_markup=admin_menu())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=user_menu())


async def on_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await start_menu(message)


async def handle_upload_photo(message: Message) -> None:
    settings = get_settings()
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return
    largest_photo = max(message.photo, key=lambda p: p.file_size or 0)
    file_id = largest_photo.file_id
    ticket_number = await get_next_ticket_number()
    await add_ticket(ticket_number, message.from_user.id, message.from_user.username, file_id)
    await message.answer(f"‚úÖ –í–∞—à –±–∏–ª–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–æ–º–µ—Ä: ‚Ññ{ticket_number}")
    await message.bot.send_message(
        chat_id=settings.group_chat_id,
        text=f"üéü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.id} –ø–æ–ª—É—á–∏–ª –±–∏–ª–µ—Ç ‚Ññ{ticket_number}",
    )


async def handle_my_tickets(message: Message) -> None:
    rows = await get_active_tickets_by_user(message.from_user.id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")
        return
    numbers = ", ".join(f"‚Ññ{r[0]}" for r in rows)
    await message.answer(f"–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {numbers}")


async def ask_user_ticket_number(message: Message, state: FSMContext) -> None:
    await state.set_state(AskTicketNumber.user_view)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞", reply_markup=back_menu())


async def user_send_ticket_number(message: Message, state: FSMContext) -> None:
    if message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=user_menu())
        return
    num = parse_int_safe(message.text)
    if num is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    ticket = await get_active_ticket_by_number(num)
    if not ticket:
        await message.answer("‚ùå –ë–∏–ª–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return
    await message.answer_photo(ticket["file_id"], caption=f"–ë–∏–ª–µ—Ç ‚Ññ{ticket['ticket_number']} (@{ticket['username']})")
    await state.clear()


async def admin_start_draw(message: Message) -> None:
    settings = get_settings()
    if not is_admin(message.from_user.id, settings.admin_ids):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    if draw_lock.locked:
        await message.answer("‚è≥ –†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∏–¥—ë—Ç, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        return
    async with draw_lock:
        ticket = await get_random_active_ticket()
        if not ticket:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            return
        await message.answer_photo(
            ticket["file_id"],
            caption=f"üé≤ –í—ã–ø–∞–ª –±–∏–ª–µ—Ç ‚Ññ{ticket['ticket_number']} (@{ticket['username']})",
            reply_markup=lottery_inline_actions(ticket["ticket_number"]),
        )


async def admin_confirm_winner(callback: CallbackQuery) -> None:
    settings = get_settings()
    if not is_admin(callback.from_user.id, settings.admin_ids):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    if not callback.data or not callback.data.startswith("confirm_win:"):
        return
    num = parse_int_safe(callback.data.split(":", 1)[1])
    if num is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", show_alert=True)
        return
    ticket = await get_ticket_by_number_any_status(num)
    if not ticket or ticket["status"] != "active":
        await callback.answer("–ë–∏–ª–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    await set_ticket_status(num, "rejected", None)  # —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
    await callback.message.bot.send_message(
        settings.group_chat_id,
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –±–∏–ª–µ—Ç ‚Ññ{num} (@{ticket['username']})!",
    )
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")


async def admin_reject_ticket_start(callback: CallbackQuery, state: FSMContext) -> None:
    settings = get_settings()
    if not is_admin(callback.from_user.id, settings.admin_ids):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    if not callback.data or not callback.data.startswith("reject_win:"):
        return
    num = parse_int_safe(callback.data.split(":", 1)[1])
    if num is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", show_alert=True)
        return
    await state.set_state(AskReason.reject_reason)
    await state.update_data(ticket_number=num)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", reply_markup=back_menu())
    await callback.answer()


async def admin_reject_reason_input(message: Message, state: FSMContext) -> None:
    settings = get_settings()
    if message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        await start_menu(message)
        return
    reason = message.text.strip()
    data = await state.get_data()
    num = data.get("ticket_number")
    await set_ticket_status(int(num), "rejected", reason)
    await message.bot.send_message(
        settings.group_chat_id,
        f"üö´ –ë–∏–ª–µ—Ç ‚Ññ{num} –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
    )
    await state.clear()
    # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    await admin_start_draw(message)


async def admin_show_by_number_ask(message: Message, state: FSMContext) -> None:
    await state.set_state(AskTicketNumber.admin_view)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞", reply_markup=back_menu())


async def admin_show_by_number_input(message: Message, state: FSMContext) -> None:
    if message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        await start_menu(message)
        return
    num = parse_int_safe(message.text)
    if num is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    ticket = await get_ticket_by_number_any_status(num)
    if not ticket:
        await message.answer("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer_photo(ticket["file_id"], caption=f"–ë–∏–ª–µ—Ç ‚Ññ{ticket['ticket_number']} (@{ticket['username']}) | —Å—Ç–∞—Ç—É—Å: {ticket['status']}")
    await state.clear()


async def admin_delete_ask(message: Message, state: FSMContext) -> None:
    await state.set_state(AskTicketNumber.admin_delete)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=back_menu())


async def admin_delete_number_input(message: Message, state: FSMContext) -> None:
    if message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        return
    num = parse_int_safe(message.text)
    if num is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(ticket_number=num)
    await state.set_state(AskReason.delete_reason)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=back_menu())


async def admin_delete_reason_input(message: Message, state: FSMContext) -> None:
    settings = get_settings()
    if message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        await start_menu(message)
        return
    reason = message.text.strip()
    data = await state.get_data()
    num = int(data.get("ticket_number"))
    await set_ticket_status(num, "deleted", reason)
    await message.bot.send_message(
        settings.group_chat_id,
        f"üóë –ë–∏–ª–µ—Ç ‚Ññ{num} —É–¥–∞–ª—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
    )
    await state.clear()


async def admin_archive(message: Message) -> None:
    settings = get_settings()
    await archive_lottery()
    await message.bot.send_message(
        settings.group_chat_id,
        "üì¶ –õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã",
    )


async def main() -> None:
    global _settings
    _settings = load_settings()
    await init_db()

    bot = Bot(
        token=_settings.bot_token,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dp = Dispatcher()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é
    dp.message.register(on_start, CommandStart())

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    dp.message.register(handle_upload_photo, F.photo)
    dp.message.register(handle_my_tickets, F.text == "üéü –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç–∏–∫–∏")
    dp.message.register(ask_user_ticket_number, F.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É –±–∏–ª–µ—Ç–∏–∫–∞")
    dp.message.register(user_send_ticket_number, AskTicketNumber.user_view)

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    dp.message.register(admin_start_draw, F.text == "üé≤ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
    dp.message.register(admin_show_by_number_ask, F.text == "üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É")
    dp.message.register(admin_show_by_number_input, AskTicketNumber.admin_view)

    dp.callback_query.register(admin_confirm_winner, F.data.startswith("confirm_win:"))
    dp.callback_query.register(admin_reject_ticket_start, F.data.startswith("reject_win:"))
    dp.message.register(admin_reject_reason_input, AskReason.reject_reason)

    dp.message.register(admin_delete_ask, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç–∏–∫")
    dp.message.register(admin_delete_number_input, AskTicketNumber.admin_delete)
    dp.message.register(admin_delete_reason_input, AskReason.delete_reason)

    dp.message.register(start_menu, F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")

    # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
    dp.message.register(admin_archive, F.text == "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é")

    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())